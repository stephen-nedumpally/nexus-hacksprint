// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  startups      Startup[]
  likes         Like[]
  dislikes      Dislike[]
  comments      Comment[]
  applications  Application[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Startup {
  id          String   @id @default(cuid())
  name        String
  description String
  domain      String[]
  website     String?
  problem     String
  solution    String
  market      String
  traction    String
  funding     String
  teamSize    Int      @default(1)
  founded     DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  positions    Position[]
  likes        Like[]
  dislikes     Dislike[]
  comments     Comment[]
  applications Application[]

  @@index([userId])
}

model Position {
  id           String        @id @default(cuid())
  title        String
  description  String
  startupId    String
  startup      Startup       @relation(fields: [startupId], references: [id])
  requirements Requirements?
  applications Application[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([startupId])
}

model Requirements {
  id          String   @id @default(cuid())
  skills      String[]
  experience  Int
  education   String?
  positionId  String   @unique
  position    Position @relation(fields: [positionId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Application {
  id         String   @id @default(cuid())
  startupId  String
  positionId String
  userId     String
  status     String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  startup    Startup  @relation(fields: [startupId], references: [id])
  position   Position @relation(fields: [positionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([positionId, userId])
  @@index([startupId])
  @@index([userId])
  @@index([positionId])
}

model Like {
  id        String   @id @default(cuid())
  startupId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startup   Startup  @relation(fields: [startupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([startupId, userId])
  @@index([startupId])
  @@index([userId])
}

model Dislike {
  id        String   @id @default(cuid())
  startupId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startup   Startup  @relation(fields: [startupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([startupId, userId])
  @@index([startupId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  startupId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startup   Startup  @relation(fields: [startupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  // Self-relation for replies
  parentId  String?
  parent    Comment?  @relation("Replies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("Replies")

  @@index([startupId])
  @@index([userId])
}
