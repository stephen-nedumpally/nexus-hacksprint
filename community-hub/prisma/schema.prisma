// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  role           String    @default("student")
  skills         String[]
  interests      String[]
  accounts      Account[]
  sessions      Session[]
  verified      Boolean   @default(false)
  skillTests    SkillTest[]
  startupApplications StartupApplication[]
  studyGroups   StudyGroupMember[]
  applications  Application[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SkillTest {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  skills    String[]
  scores    Json
  takenAt   DateTime @default(now())
  nextTestAt DateTime
}

model Startup {
  id          String   @id @default(cuid())
  name        String
  description String
  logo        String?
  foundedYear Int
  teamSize    Int
  domain      String[]
  website     String?
  problemStatement String
  solution    String
  techStack   String[]
  tam         Float    // Total Addressable Market in millions
  sam         Float    // Serviceable Addressable Market in millions
  competitors Int
  mrr         Float?   // Monthly Recurring Revenue
  stage       String   // e.g., "Idea", "MVP", "Growth", "Scale"
  fundingRound String? // e.g., "Pre-seed", "Seed", "Series A"
  fundingRaised Float? // Total funding raised in millions
  traction    String?  // Key metrics and growth numbers
  positions   Position[]
  applications StartupApplication[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StartupApplication {
  id        String   @id @default(cuid())
  userId    String
  startupId String
  status    String
  user      User     @relation(fields: [userId], references: [id])
  startup   Startup  @relation(fields: [startupId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudyGroup {
  id          String   @id @default(cuid())
  name        String
  description String
  type        String
  level       String[]
  roadmap     Json
  schedule    Json
  members     StudyGroupMember[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StudyGroupMember {
  id           String     @id @default(cuid())
  userId       String
  studyGroupId String
  role         String
  user         User       @relation(fields: [userId], references: [id])
  studyGroup   StudyGroup @relation(fields: [studyGroupId], references: [id])
  joinedAt     DateTime   @default(now())

  @@unique([userId, studyGroupId])
}

model Position {
  id          String   @id @default(cuid())
  title       String
  description String
  startup     Startup  @relation(fields: [startupId], references: [id])
  startupId   String
  requirements Requirements?
  applications Application[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Requirements {
  id          String   @id @default(cuid())
  position    Position @relation(fields: [positionId], references: [id])
  positionId  String   @unique
  skills      String[]
  experience  Int      // in months
  education   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Application {
  id          String   @id @default(cuid())
  position    Position @relation(fields: [positionId], references: [id])
  positionId  String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  status      String   @default("pending") // pending, accepted, rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([positionId, userId])
}
